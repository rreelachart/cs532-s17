RAW HTML FOR: http://prog21.dadgum.com/229.html
<!DOCTYPE html><html lang="en"><head><title>So Long, Prog21</title><link rel="alternate" type="application/atom+xml" title="Atom feed" href="atom.xml"><meta name="viewport" content="width=device-width,initial-scale=1"><style>a,#p21{text-decoration:none}a:link{color:#00D}a:visited{color:purple}a:hover{text-decoration:underline}body,div{margin:0;padding:0;box-sizing:border-box}body{font:100%/1.5 verdana;color:#222}p,ul,blockquote,pre{margin:0 0 1em}ul{list-style:none;padding-left:1em;text-indent:-1em}h1,h2{font:700 1.27em verdana;margin:0 0 .5em}h1{color:#117}blockquote{font-style:italic}pre,code{font:700 1em "courier new",monospace}pre{overflow:auto}.box{margin:0 auto;padding:0 12px}.s{font:.91em/1.4 verdana}.ab a{display:block;margin:0 0 1em;padding-left:1em;text-indent:-1em}#top{background:#117;color:#FFF;margin:0 0 .67em;border:0 solid #7373D9;border-width:0 0 12px;padding:2em 0 0}#p21{font:700 2.5em georgia;color:#FFF}#perm{color:#222;background:#DDD;border:1px solid #BBB;padding:2px}@media screen and (min-width:768px){blockquote,pre{margin-left:1.25em}.box{max-width:840px}#c1{width:71%;float:left}#c2{width:26%;float:right}}</style></head><body><div id="top"><div class="box"><a id="p21" href="/">programming in&nbsp;the<br>twenty-first century</a><p>It's not about technology for its own sake. It's about being able to implement your ideas.</p></div></div><div class="box"><div id="c1"><h1>So Long, Prog21</h1><p>I always intended "Programming in the 21st Century" to have a limited run. I knew since the <a href="56.html">Recovering Programmer</a> entry from January 1, 2010, that I needed to end it. It just took a while.</p><p>And now, an explanation.</p><p>I started this blog to talk about issues tangentially related to programming, about soft topics like creativity and inspiration and how code is a medium for implementing creative visions. Instead I worked through more technical topics that I'd been kicking around over the years. That was fun! <a href="23.html">Purely Functional Retrogames</a> is something I would have loved to read in 1998. More than once I've googled around and ended up back at one of my essays.</p><p>As I started shifting gears and getting back toward what I originally wanted to do, there was one thing that kept bothering me: the word <i>programming</i> in the title.</p><p>I don't think of myself as a programmer. I write code, and I often enjoy it when I do, but that term <i>programmer</i> is both limiting and distracting. I don't want to program for its own sake, not being interested in the overall experience of what I'm creating. If I start thinking too much about programming as a distinct entity then I lose sight of that. Now that I've exhausted what I wanted to write about, I can clear those topics out of my head and focus more on using technology to make fun things.</p><p>Thanks for reading!</p><p>It's hard to sum up 200+ articles, but here's a start. This is not even close to a full index. See the <a href="archives.html">archives</a> if you want everything. (There are some <a href="32.html">odd</a> bits in there.)</p><h2>widely linked</h2><ul>
<li><a href="116.html">Things That Turbo Pascal is Smaller Than</a></li>
<li><a href="154.html">Do You Really Want to be Doing This When You're 50?</a></li>
<li><a href="177.html">Organizational Skills Beat Algorithmic Wizardry</a></li>
<li><a href="203.html">Retiring Python as a Teaching Language</a></li>
<li><a href="210.html">Computer Science Courses that Don't Exist, But Should</a></li>
</ul><h2>popular</h2><ul>
<li><a href="19.html">Five Memorable Books About Programming</a></li>
<li><a href="29.html">A Spellchecker Used to Be a Major Feat of Software Engineering</a></li>
<li><a href="30.html">Want to Write a Compiler? Just Read These Two Papers.</a></li>
<li><a href="40.html">On Being Sufficiently Smart</a></li>
<li><a href="61.html">Optimizing for Fan Noise</a></li>
<li><a href="74.html">Free Your Technical Aesthetic from the 1970s</a></li>
<li><a href="80.html">Advice to Aimless, Excited Programmers</a></li>
<li><a href="87.html">Write Code Like You Just Learned How to Program</a></li>
<li><a href="93.html">Don't Distract New Programmers with OOP</a></li>
<li><a href="123.html">Recovering From a Computer Science Education</a></li>
<li><a href="128.html">Don't Fall in Love With Your Technology</a></li>
<li><a href="129.html">A Complete Understanding is No Longer Possible</a></li>
<li><a href="130.html">Solving the Wrong Problem</a></li>
<li><a href="132.html">This is Why You Spent All that Time Learning to Program</a></li>
<li><a href="139.html">We Who Value Simplicity Have Built Incomprehensible Machines</a></li>
<li><a href="142.html">Your Coding Philosophies are Irrelevant</a></li>
<li><a href="143.html">The Silent Majority of Experts</a></li>
<li><a href="149.html">Hopefully More Controversial Programming Opinions</a></li>
<li><a href="179.html">How much memory does malloc(0) allocate?</a></li>
</ul><h2>on creativity</h2><ul>
<li><a href="46.html">The Pure Tech Side is the Dark Side</a></li>
<li><a href="58.html">Flickr as a Business Simulator</a></li>
<li><a href="69.html">How to Think Like a Pioneer</a></li>
<li><a href="72.html">What Do People Like?</a></li>
<li><a href="89.html">Accidental Innovation, Part 1</a></li>
<li><a href="94.html"> If You're Not Gonna Use It, Why Are You Building It?</a></li>
<li><a href="107.html">It's Like That Because It Has Always Been Like That</a></li>
<li><a href="164.html">Trapped by Exposure to Pre-Existing Ideas</a></li>
<li><a href="193.html">Get Good at Idea Generation</a></li>
<li><a href="197.html">You Can't Sit on the Sidelines and Become a Philosopher</a></li>
<li><a href="202.html">The Software Developer's Sketchbook</a></li>
<li><a href="199.html">Design is Expensive</a></li>
<li><a href="208.html">Why Doesn't Creativity Matter in Tech Recruiting?</a></li>
</ul><h2>others that I like</h2><ul>
<li><a href="8.html">Deriving Forth</a></li>
<li><a href="50.html">Tales of a Former Disassembly Addict</a></li>
<li><a href="66.html">Living Inside Your Own Black Box</a></li>
<li><a href="71.html">Tricky When You Least Expect It</a></li>
<li><a href="137.html">The Most Important Decisions are Non-Technical</a></li>
<li><a href="145.html">Things to Optimize Besides Speed and Memory</a></li>
<li><a href="148.html">All that Stand Between You and a Successful Project are 500 Experiments</a></li>
<li><a href="159.html">The UNIX Philosophy and a Fear of Pixels</a></li>
<li><a href="160.html">Dangling by a Trivial Feature</a></li>
<li><a href="161.html">Documenting the Undocumentable</a></li>
<li><a href="190.html">You Don't Want to Think Like a Programmer</a></li>
<li><a href="194.html">You Don't Read Code, You Explore It</a></li>
<li><a href="209.html">If You Haven't Done It Before, All Bets Are Off</a></li>
<li><a href="212.html">What Can You Put in a Refrigerator?</a></li>
<li><a href="214.html">The Same User Interface Mistakes Over and Over</a></li>
<li><a href="221.html">Fun vs. Computer Science</a></li>
</ul><h2>Erlang</h2><ul>
<li><a href="1.html">A Deeper Look at Tail Recursion in Erlang</a></li>
<li><a href="22.html">My Road to Erlang</a></li>
<li><a href="16.html">Garbage Collection in Erlang</a></li>
<li><a href="43.html">How to Crash Erlang</a></li>
<li><a href="64.html">Eleven Years of Erlang</a></li>
<li><a href="70.html">A Ramble Through Erlang IO Lists</a></li>
<li><a href="81.html">A Concurrent Language for Non-Concurrent Software</a></li>
<li><a href="127.html">A Peek Inside the Erlang Compiler</a></li>
<li><a href="220.html">Evolution of an Erlang Style</a></li>
</ul><h2>retro</h2><ul>
<li><a href="45.html">A Personal History of Compilation Speed</a></li>
<li><a href="52.html">Slow Languages Battle Across Time</a></li>
<li><a href="68.html">How Much Processing Power Does it Take to be Fast?</a></li>
<li><a href="104.html">8-Bit Scheme: A Revisionist History</a></li>
<li><a href="173.html">Stumbling Into the Cold Expanse of Real Programming</a></li>
<li><a href="181.html">Why Do Dedicated Game Consoles Exist?</a></li>
<li><a href="198.html">Lost Lessons from 8-Bit BASIC</a></li>
<li><a href="201.html">Programming Modern Systems Like It Was 1984</a></li>
</ul><p>Also see the <a href="228.html">previous entry</a> for all of the functional programming articles.</p><p><a href="http://dadgum.com/james/performance.html">Programming as if Performance Mattered</a> is something I wrote in 2004 which used to be linked from every prog21 entry.</p><p class="s"><a href="229.html" id="perm">permalink</a> <i>January 4, 2017</i></p><h1>previously</h1><ul><li><a href=228.html>Writing Video Games in a Functional Style</a><li><a href=227.html>Progress Bars are Surprisingly Difficult</a><li><a href=226.html>Learning to Program Without Writing the Usual Sort of Code</a><li><a href=225.html>Picturing WebSocket Protocol Packets</a><li><a href=224.html>Being More Than "Just the Programmer"</a></ul></div><div id="c2"><h1><a href="archives.html">archives</a></h1><p><b><a href="https://twitter.com/dadgumjames">twitter</a></b> / <b><a href="mailto:james.hague@gmail.com">mail</a></b></p><div class="s"><p>I'm James Hague, a <a href="56.html">recovering programmer</a> who has been designing video games since the 1980s. <a href="195.html">Programming Without Being Obsessed With Programming</a> and <a href="177.html">Organizational Skills Beat Algorithmic Wizardry</a> are good starting points. For the older stuff, try the <a href="162.html">2012 Retrospective</a>.</p><p>Where are <a href="57.html">the comments</a>?</p></div></div></div>